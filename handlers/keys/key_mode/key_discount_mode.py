from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config import DISCOUNT_ACTIVE_HOURS
from database import get_keys, get_tariffs
from database.models import Notification
from handlers.buttons import MAIN_MENU, RENEW_KEY_NOTIFICATION
from handlers.notifications.notify_kb import build_tariffs_keyboard
from handlers.texts import DISCOUNT_TARIFF, DISCOUNT_TARIFF_MAX
from handlers.utils import format_discount_time_left
from logger import logger

from .key_create import select_tariff_plan


router = Router()


@router.callback_query(F.data == "hot_lead_discount")
async def handle_discount_entry(callback: CallbackQuery, session: AsyncSession):
    tg_id = callback.from_user.id

    result = await session.execute(
        select(Notification.last_notification_time).where(
            Notification.tg_id == tg_id,
            Notification.notification_type == "hot_lead_step_2",
        )
    )
    last_time = result.scalar_one_or_none()

    if not last_time:
        await callback.message.edit_text("‚ùå –°–∫–∏–¥–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    now = datetime.utcnow()
    if now - last_time > timedelta(hours=DISCOUNT_ACTIVE_HOURS):
        await callback.message.edit_text("‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏ –∏—Å—Ç—ë–∫.")
        return

    keys = await get_keys(session, tg_id)

    if keys and len(keys) > 0:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text=RENEW_KEY_NOTIFICATION, callback_data=f"renew_key|{keys[0].email}"))
        builder.row(InlineKeyboardButton(text=MAIN_MENU, callback_data="profile"))

        expires_at = last_time + timedelta(hours=DISCOUNT_ACTIVE_HOURS)
        await callback.message.edit_text(
            f"üéØ <b>–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!</b>\n\n<blockquote>"
            f"üíé <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã</b> ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!\n"
            f"üöÄ <b>–ü–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b> –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!\n"
            f"</blockquote>\n"
            f"‚è∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤—Å–µ–≥–æ: {format_discount_time_left(expires_at, DISCOUNT_ACTIVE_HOURS)} ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!</b>",
            reply_markup=builder.as_markup(),
        )
    else:
        tariffs = await get_tariffs(session=session, group_code="discounts")
        if not tariffs:
            await callback.message.edit_text("‚ùå –°–∫–∏–¥–æ—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return

        await callback.message.edit_text(
            DISCOUNT_TARIFF,
            reply_markup=build_tariffs_keyboard(tariffs, prefix="discount_tariff"),
        )


@router.callback_query(F.data.startswith("discount_tariff|"))
async def handle_discount_tariff_selection(callback: CallbackQuery, session, state):
    try:
        tariff_id = int(callback.data.split("|")[1])
        fake_callback = CallbackQuery.model_construct(
            id=callback.id,
            from_user=callback.from_user,
            chat_instance=callback.chat_instance,
            message=callback.message,
            data=f"select_tariff_plan|{tariff_id}",
        )
        await select_tariff_plan(fake_callback, session=session, state=state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")


@router.callback_query(F.data == "hot_lead_final_discount")
async def handle_ultra_discount(callback: CallbackQuery, session: AsyncSession):
    tg_id = callback.from_user.id

    result = await session.execute(
        select(Notification.last_notification_time).where(
            Notification.tg_id == tg_id,
            Notification.notification_type == "hot_lead_step_3",
        )
    )
    last_time = result.scalar_one_or_none()

    if not last_time:
        await callback.message.edit_text("‚ùå –°–∫–∏–¥–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    now = datetime.utcnow()
    if now - last_time > timedelta(hours=DISCOUNT_ACTIVE_HOURS):
        await callback.message.edit_text("‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –∏—Å—Ç—ë–∫.")
        return

    keys = await get_keys(session, tg_id)

    if keys and len(keys) > 0:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text=RENEW_KEY_NOTIFICATION, callback_data=f"renew_key|{keys[0].email}"))
        builder.row(InlineKeyboardButton(text=MAIN_MENU, callback_data="profile"))

        await callback.message.edit_text(
            f"üéØ <b>–£–ù–ò–ö–ê–õ–¨–ù–û–ï –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!</b>\n\n<blockquote>"
            f"üíé <b>–î–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–∏—Ñ–∞–º —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –≤—ã–≥–æ–¥–æ–π</b> ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!\n"
            f"üöÄ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</b> ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ!\n"
            f"</blockquote>\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: {format_discount_time_left(last_time, DISCOUNT_ACTIVE_HOURS)} ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!</b>",
            reply_markup=builder.as_markup(),
        )
    else:
        tariffs = await get_tariffs(session, group_code="discounts_max")
        if not tariffs:
            await callback.message.edit_text("‚ùå –°–∫–∏–¥–æ—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return

        await callback.message.edit_text(
            DISCOUNT_TARIFF_MAX,
            reply_markup=build_tariffs_keyboard(tariffs, prefix="discount_tariff"),
        )
